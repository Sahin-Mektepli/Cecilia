uint64_t *add_noise(Party *const proxy, uint64_t *numbers, uint32_t sz, uint32_t scale_32bit){
    const int length = int(sz);
    double scale = ConvertToDouble(uint64_t(scale_32bit));
    cout << "length is " << length << endl;
    cout << "scale is " << scale << endl;

    if (proxy->GetPRole() == helper){ //helper gürültünün imalinden mesul
        
        //bu kısımda gürültü imal edilmeli ve onun gizli payları oluşturulmalı.
        double *noise = new double[length];

        noise = generateLaplaceNoise(scale, length);
        
        uint64_t *noise_shares = ConvertToUint64(noise, length);

        uint64_t proxy1_share;
        uint64_t proxy2_share;
        
        unsigned char *ptr1 = proxy->GetBuffer1();
        unsigned char *ptr2 = proxy->GetBuffer2(); //HELPER'IN buffer'lara pointer'lar
        cout << "pointerlar falan tamam" << endl;
        for(int i=0; i<length; i++){ //bu optimal olmayabilir.
            cout << "for'a girdik" << endl;
            uint64_t tempShare = proxy->GenerateRandom();  //elimizde GenerateRandom da var, ikisi de aynı çalışıyor gibi.
            cout << "rastgele üretim" << endl;
            proxy1_share = tempShare; //ilki rastgele bir sayı olacak.
            proxy2_share = noise_shares[i] - tempShare; //ikincisi de o rastgele ile bizim göndermek istediğimizin farkı.

            AddValueToCharArray(proxy1_share, &ptr1); //Helper proxy1 için olan verisini kendi 1. buffer'ına ve
            AddValueToCharArray(proxy2_share, &ptr2); //proxy2'nin verisini kendi 2. buffer'ına yüklüyor
        }        
        cout << "for looptan çıktık" << endl;
        thread thr1 = thread(Send, proxy->GetSocketP1(), proxy->GetBuffer1(), length * 8);
        thread thr2 = thread(Send, proxy->GetSocketP2(), proxy->GetBuffer2(), length * 8);        

        thr1.join();
        thr2.join();

        delete[] noise;
        return nullptr;
    }
    else{
        cout << "add_noise proxy başla" << endl;
        uint64_t *noise_shares = new uint64_t[length];
        Receive(proxy->GetSocketHelper(), proxy->GetBuffer1(), 8*length); 
        cout << "add_noise proxy receive tamam" << endl;

        unsigned char *ptr = proxy->GetBuffer1(); //KENDİ birinci buffer'ı (birincinin buffer'ı değil!!)     

        for(int i=0; i<length; ++i){
            noise_shares[i] = ConvertToLong(&ptr);
        }
        cout << "add_noise proxy çevirmeler tamam" << endl;
        uint64_t *noiseful_shares = Add(proxy, numbers, noise_shares, length);


        delete[] noise_shares;
        return noiseful_shares;
    }
}