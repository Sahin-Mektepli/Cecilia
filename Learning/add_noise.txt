uint64_t *add_noise(Party *const proxy, uint64_t *numbers, int size){
    if (proxy->GetPRole() == helper){ //helper gürültünün imalinden mesul
        //bu kısımda gürültü imal edilmeli ve onun gizli payları oluşturulmalı.
        double *noise = new double[size];

        //----------------------//
        //Burada gerekli fonkisyonu kullanarak laplace dağılımına göre elemanlar ürettiğimiz zaman gürültü ekleme işini halletmiş oluyoruz!
        for(int i=0; i<size; i++){    
            noise[i] = 100;
        }
        //Ben şimdilik öyle kafadan 100 ekliyorum :p
        //----------------------//
        uint64_t *noise_shares = ConvertToUint64(noise, size);

        uint64_t proxy1_share;
        uint64_t proxy2_share;

        unsigned char *ptr1 = proxy->GetBuffer1();
        unsigned char *ptr2 = proxy->GetBuffer2(); //HELPER'IN buffer'lara pointer'lar

        for(int i=0; i<size; i++){ //bu optimal olmayabilir.
            uint64_t tempShare = proxy->GenerateCommonRandom();  //elimizde GenerateRandom da var, ikisi de aynı çalışıyor gibi.
            proxy1_share = tempShare; //ilki rastgele bir sayı olacak.
            proxy2_share = noise_shares[i] - tempShare; //ikincisi de o rastgele ile bizim göndermek istediğimizin farkı.

            AddValueToCharArray(proxy1_share, &ptr1); //Helper proxy1 için olan verisini kendi 1. buffer'ına ve
            AddValueToCharArray(proxy2_share, &ptr2); //proxy2'nin verisini kendi 2. buffer'ına yüklüyor
        }        
        
        Send(proxy->GetSocketP1(), proxy->GetBuffer1(), 8*size); //asıl gönderme işlemi.
        Send(proxy->GetSocketP2(), proxy->GetBuffer2(), 8*size); //thread kullanmayı sevmiyorum. o yüzden kullanmadım :p

        delete[] noise;
        return nullptr;
    }
    else{
        uint64_t *noise_shares = new uint64_t[size];
        Receive(proxy->GetSocketHelper(), proxy->GetBuffer1(), 8*size); 

        unsigned char *ptr = proxy->GetBuffer1(); //KENDİ birinci buffer'ı (birincinin buffer'ı değil!!)     

        for(int i=0; i<size; ++i){
            noise_shares[i] = ConvertToLong(&ptr);
        }
        uint64_t *noiseful_shares = Add(proxy, numbers, noise_shares, size);

        delete[] noise_shares;
        return noiseful_shares;
    }
}